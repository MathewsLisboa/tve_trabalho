summary(BB_gevfit1)
summary(BB_gevfit2)
summary(PORTO_gevfit1)
summary(PORTO_gevfit2)
BB_fit <- fevd(BB_ts$Retorno, type="GEV")
pars <- data.frame("Locacao" = BB_fit$results$par['location'],
"Escala" = BB_fit$results$par['scale'],
"Forma" = BB_fit$results$par['shape'])
row.names(pars) <- ""
kbl(pars, booktabs = T,
caption = "Parâmetros estimados para o ajuste de uma distribuição GEV para dados BB15.") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
PORTO_fit <- fevd(PORTO_ts$Retorno, type="GEV")
pars <- data.frame("Locacao" = PORTO_fit$results$par['location'],
"Escala" = PORTO_fit$results$par['scale'],
"Forma" = PORTO_fit$results$par['shape'])
row.names(pars) <- ""
kbl(pars, booktabs = T,
caption = "Parâmetros estimados para o ajuste de uma distribuição GEV para dados PORTO57.") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
PORTO_alpha_params
BB_alpha_params
PORTO_exp %>%
kbl(caption = "Medidas resumo do retorno das ações da PORTO.", booktabs = T) %>%
kable_styling(latex_options = c("striped", "hold_position"),
full_width = F)
head(BB, 5) %>%
kbl(caption="Alta e retorno das ações da BB.", booktabs = T) %>%
kable_styling(latex_options = c("striped", "hold_position"),
full_width = F)
head(PORTO, 5) %>%
kbl(caption = "Alta e retorno das ações da PORTO.", booktabs = T) %>%
kable_styling(latex_options = c("striped", "hold_position"),
full_width = F)
BB_alpha_params
PORTO_alpha_params
BB_VaR %>%
kbl(booktabs = T, caption = "\\label{tab:BBvar3}VaR (Value at Risk) para os log-retornos diários da BB") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
PORTO_VaR %>%
kbl(booktabs = T, caption = "\\label{tab:PORTOvar3}VaR (Value at Risk) para os log-retornos diários da PORTO") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
BB_VaR %>%
kbl(booktabs = T, caption = "\\label{tab:BBvar3}VaR (Value at Risk) para os log-retornos diários da BB") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
PORTO_VaR
PORTO_VaR
PORTO_VaR %>%
kbl(booktabs = T, caption = "\\label{tab:PORTOvar3}VaR (Value at Risk) para os log-retornos diários da PORTO") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
BB_VaR %>%
kbl(booktabs = T, caption = "\\label{tab:BBvar3}VaR (Value at Risk) para os log-retornos diários da BB") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
PORTO_VaR <- tibble(
"VaR Historico" = map_dbl(p, ~PerformanceAnalytics::VaR(PORTO_ret, p=.x, method = "historical")),
"VaR Gaussiano" = map_dbl(p, ~PerformanceAnalytics::VaR(PORTO_ret, p=.x, method = "gaussian")),
"VaR Alfa-Estavel" = map_dbl(p, qstable, alpha=PORTO_alpha_params['alpha'], beta=PORTO_alpha_params['beta'],
gamma=PORTO_alpha_params['gamma'], delta=PORTO_alpha_params['delta'])) %>%
map_df(round, 4) %>%
mutate("Confianca" = paste0(p*100,"%"), .before = "VaR Historico")
PORTO_VaR %>%
kbl(booktabs = T, caption = "\\label{tab:PORTOvar3}VaR (Value at Risk) para os log-retornos diários da PORTO") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
ggarrange(Hist_Fit(data = BB_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = BB_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggarrange(Hist_Fit(data = PORTO_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = PORTO_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
BB_Bmax
PORTO_Bmax
BB_q <- c((1:BB_n)/(BB_n+1))
BB_ginv <- -log(-log(BB_q))
qqplot(BB_ts$Retorno, BB_ginv, xlab="Quantil empírico",ylab="Quantil da Fréchet",main="")
grid()
PORTO_q <- c((1:PORTO_n)/(PORTO_n+1))
PORTO_ginv <- -log(-log(PORTO_q))
qqplot(PORTO_ts$Retorno, PORTO_ginv, xlab="Quantil empírico",ylab="Quantil da Gumbel",main="")
grid()
save(list = c(PORTO_Bmax, BB_Bmax), file = 'calculos_B_max_prontos')
save(list = list(PORTO_Bmax, BB_Bmax), file = 'calculos_B_max_prontos')
save(list = list('PORTO_Bmax', 'BB_Bmax'), file = 'calculos_B_max_prontos')
save(list = list('PORTO_Bmax', 'BB_Bmax'), file = 'calculos_B_max_prontos.rdata')
save(list = list(PORTO_Bmax, BB_Bmax), file = 'calculos_B_max_prontos.rdata')
save(PORTO_Bmax, file = 'porto_B_max_prontos.rdata')
save(BB_Bmax, file = 'BB_B_max_prontos.rdata')
Hist_Fit(data = BB_ts, values = 'Retorno', bins = 10,
fits = c("gevmle", "gevpwm"), fits_param = list("gevmle" = BB_gevmle,
"gevpwm" = BB_gevpwm))
Hist_Fit(data = PORTO_ts, values = 'Retorno', bins = 10,
fits = c("gevmle", "gevpwm"), fits_param = list("gevmle" = PORTO_gevmle,
"gevpwm" = PORTO_gevpwm))
pacman::p_load('tidyverse','lubridate','copula',
'fBasics','StableEstim','stabledist',
'DT','kableExtra','PerformanceAnalytics',
'extRemes', 'ismev', 'evmix', 'evd', 'extremis',
'VGAM', 'fExtremes', 'dplyr', 'ggplot2', 'ggpubr',
'bgumbel')
ano_inicio <- as.Date("2014-01-02", format = "%Y-%m-%d")
ano_fim <-  as.Date("2022-12-29", format = "%Y-%m-%d")
source("funcoes.R")
Hist_Fit(data = BB_ts, values = 'Retorno', bins = 10,
fits = c("gevmle", "gevpwm"), fits_param = list("gevmle" = BB_gevmle,
"gevpwm" = BB_gevpwm))
qqplot(BB_ts$Retorno, BB_ginv, xlab="Quantil empírico",ylab="Quantil da Fréchet",main="")
qqplot(PORTO_ts$Retorno, PORTO_ginv, xlab="Quantil empírico",ylab="Quantil da Gumbel",main="")
ggarrange(Hist_Fit(data = BB_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = BB_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggarrange(Hist_Fit(data = PORTO_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = PORTO_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
kbl(BB_tab[(BB_n-5):(BB_n+5),], booktabs = T,
caption = "P-valores do teste de Ljung-Box para diferentes tamanhos de
bloco máximo dos retornos das ações da BB") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
kbl(PORTO_tab[(PORTO_n-5):(PORTO_n+5),], booktabs = T,
caption = "P-valores do teste de Ljung-Box para diferentes tamanhos de
bloco máximo dos retornos das ações da PORTO") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
kbl(BB_tab[(BB_n-5):(BB_n+5),], booktabs = T,
caption = "P-valores do teste de Ljung-Box para diferentes tamanhos de
bloco máximo dos retornos das ações da BB") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
ggarrange(Hist_Fit(data = BB_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = BB_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggarrange(Hist_Fit(data = BB_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = BB_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggsave ("imagens/hist_retorno_max_bbse3", width = 6.5, height = 4)
ggarrange(Hist_Fit(data = PORTO_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = PORTO_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggsave ("imagens/hist_retorno_max_porto", width = 6.5, height = 4)
ggarrange(Hist_Fit(data = BB_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = BB_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggsave ("imagens/hist_retorno_max_bbse3", width = 6.5, height = 4)
ggarrange(Hist_Fit(data = BB_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = BB_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggsave ("imagens/hist_retorno_max_bbse3", width = 6.5, height = 4)
rlang::last_error()
getwd()
ggarrange(Hist_Fit(data = BB_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = BB_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
### Arquivo contendo todas as funções customizadas utilizadas nos trabalhos 1 e 2
pacman::p_load('dplyr', 'purrr', 'ggplot2', 'stringr', 'stabledist', 'fExtremes', 'RColorBrewer')
tab_exp <- function (arr, decimals=4) {
data.frame(
"Media" = mean(arr),
"Variancia" = var(arr),
"Desvio.Padrao" = sqrt(var(arr)),
"Minimo" = range(arr)[1],
"Maximo" = range(arr)[2],
"Prim.Quantil" = quantile(arr, 0.25),
"Seg.Quantil" = quantile(arr, 0.50),
"Ter.Quantil" = quantile(arr, 0.75)) %>%
map_df(round, decimals)
}
Serie <- function (data, col_x, col_y, dodge=1) {
plot <- ggplot(data) +
geom_line(aes(x = as.Date(.data[[col_x]]), y = .data[[col_y]]), size=1) +
xlab("Tempo") + ylab("Maximo valor diario alcançado") +
scale_x_date(date_labels = "%b-%Y", breaks = seq(ano_inicio, ano_fim, 365),
guide = guide_axis(n.dodge = dodge)) +
theme_bw()
return(plot)
}
Hist_Fit <- function (data, values, fits=c(), fits_param=c(), bins=30) {
values <- data[[values]]
fits <- map_chr(fits, str_to_lower)
plot <- ggplot() +
geom_histogram(aes(x = values, y = ..density..),
fill = "steelblue", color = "black",
bins = bins) +
xlab("Log-retorno diario") + ylab("Densidade") +
theme_bw()
if ('self' %in% fits) {
plot <- plot + geom_density(aes(values), color="turquoise3",
size=1.1)
fits <- fits[!('self' == fits)]
}
if (length(fits)) {
x <- seq(min(values), max(values), length.out = 1000)
fits_df <- data.frame(matrix(ncol = 0, nrow = 0))
labels <- data.frame(
"gaussian" = "Normal",
"stable" = "Alfa-Estavel",
"gev" = "GEV",
"gevpwm" = "GEV(PWM)",
"gevmle" = "GEV(MLE)"
)
for (fit in fits) {
if (str_detect(fit,'gaussian')) {
if (!length(fits_param[[fit]])) {
fits_param[[fit]] <- c('mean' = mean(values), 'sd' = sd(values))
}
y <- map_dbl(x, dnorm, fits_param[[fit]][['mean']], fits_param[[fit]][['sd']])
} else if (str_detect(fit,'stable')) {
if (!length(fits_param[[fit]])) {
fits_param[[fit]] <- c('alpha' = 2, 'beta' = 0.5, 'gamma' = 1, 'delta' = 0)
}
y <- map_dbl(x, dstable, fits_param[[fit]][['alpha']], fits_param[[fit]][['beta']],
fits_param[[fit]][['gamma']], fits_param[[fit]][['delta']])
}else if (str_detect(fit,'gev')) {
if (!length(fits_param[[fit]])) {
fits_param[[fit]] <- c('xi' = 1, 'mu' = 0, 'beta' = 1)
}
y <- map_dbl(x, fExtremes::dgev, fits_param[[fit]][['xi']],
fits_param[[fit]][['mu']], fits_param[[fit]][['beta']])
}
fit_df <- data.frame(
"X" = x,
"Y" = y,
"Ajuste" = labels[[fit]]
)
fits_df <- rbind(fits_df, fit_df)
}
colors <- brewer.pal(max(3, length(fits)+1), 'Set1')[-2]
plot <- plot + geom_line(data = fits_df, aes(x=X, y=Y, group=Ajuste, color=Ajuste), size=1.1) +
scale_color_manual(values = colors)
}
return(plot)
}
Bloco_maximo <- function (data, values, x_axis="Date", conf = 0.05, force=0) {
section <- function (n, data, values) {
tau <- floor(nrow(data) / n)
maximos <- data.frame(matrix(nrow=tau, ncol = length(data)))
inicio <- 1
for (i in 1:tau) {
## Pega-se o maior valor dado um tamanho de bloco
## Exemplo, se n = 3, entao pega-se
## as observacoes de 1 a 3 (incluso 3), de 4 a 6 (incluso 6), ...
maximos[i,] <-  dplyr::filter(data[inicio: (inicio + n - 1),],
eval(parse(text = values)) == max(data[[values]][inicio: (inicio + n - 1)]))[1,]
# Atualiza o indice inicial do bloco
inicio <- inicio + n
}
names(maximos) <- names(data)
return(maximos)
}
data[[x_axis]] <- as.character(data[[x_axis]])
# Data frame que acumula os testes para cada tamanho de bloco
ans_tab <- data.frame(matrix(nrow = 0, ncol = 2))
# n trata-se dos tamanhos de bloco
for (n in 1:60) {
maximos <- section(n, data = data, values = values)
## Teste de Ljung-Box para series historicas
teste <- Box.test(maximos[[values]], lag = 1, type = "Ljung-Box", fitdf = 0)
teste <- c(n, teste$p.value)
# Coloca-se o resultado em um dataframe com todos os p-valores
# para comparacao futura
ans_tab <- rbind(ans_tab, teste)}
ans_tab <- ans_tab %>%
rename_all( ~ c("Tamanho", "P.valor"))
if (TRUE %in% (ans_tab$P.valor < conf)) {
# Retorna apenas o indice subsequente ao último indice em que o teste rejeitou independencia
n <- last(dplyr::filter(ans_tab, P.valor < conf))[[1]] + 1
} else {
# Retorna apenas o valor de n que fornece o maior p-valor e o bloco é maior que 7 (arbitrario)
n <- dplyr::filter(ans_tab, P.valor == max(ans_tab$P.valor) & Tamanho > 7)[["Tamanho"]]
message("Nao foi encontrado nenhum p-valor mais\nsignificativo que o nivel de confiança")
}
# Para forcar um certo tamanho de bloco e, entre outras coisas, manter os bancos com mesmo tamanho
if (force > 0){
force <- floor(force)
Serie_temp <- section(force, data = data, values = values)
ans <- list(force, ans_tab, Serie_temp)
} else {
Serie_temp <- section(n, data = data, values = values)
ans <- list(n, ans_tab, Serie_temp)
}
names(ans) <- c("n", "Teste", "Serie")
return(ans)
}
Retorno <- function (fit, years, investimento = 1000, nome = "Data") {
n <- length(years)
estimativa <- return.level(fit, years, do.ci = TRUE)[1:(n*3)]
retorno_df <- data.frame(matrix(estimativa, ncol = 3, nrow = n)) %>%
dplyr::select(X2) %>%
map_df(~round(exp(.x)*investimento), 0) %>%
map_df(~paste0("$", .x))
confianca_df <- data.frame(matrix(ncol = n+1, nrow = 1)) %>%
rename_all(~c("Fonte", paste0(round((1-1/years)*100, 2), "%")))
confianca_df[1,] <- c(nome, retorno_df$X2)
return(confianca_df)
}
### GEV -----------------------------------------------------------------------------
## FDA fornecida
pgev <- function(x, mu, sigma, xi) {
if (xi != 0) {
return( exp(-(1 + xi*(x-mu)/sigma)^(-1/xi)) )
} else {
return( exp(-exp(- (x-mu)/sigma)) )
}
}
## Inversa da FDA (Quantil)
qgev <- function(q, mu, sigma, xi) {
if (xi != 0) {
return(mu - (sigma/xi) * ( 1 - (-log(q))^(-xi)) )
} else {
return(mu - sigma*log(-log(q))  )
}
}
## Derivada da FDA (Densidade)
dgev <- function(x, mu, sigma, xi) {
if (xi != 0) {
return ( exp(-(1 + xi*(x-mu)/sigma)^(-1/xi)) *
(1/xi*(1 + xi*(x-mu)/sigma)^(-1/xi-1) ) * xi/sigma )
} else {
return ( exp(-exp(- (x-mu)/sigma)) * (1/sigma)*(exp(- (x-mu)/sigma)) )
}
}
### Copula -----------------------------------------------------------------------------
gen_gumbel <- function (theta, alpha) {
vphi <- (-log(alpha))^(theta)
return(vphi)
}
inv_gen_gumbel <- function (theta, t) {
inv <- exp(-t^(1/theta))
return(inv)
}
ggarrange(Hist_Fit(data = BB_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = BB_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggsave ("imagens/hist_retorno_max_bbse3", width = 6.5, height = 4)
ggarrange(Hist_Fit(data = BB_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = BB_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggplot2:: ggsave ("imagens/hist_retorno_max_bbse3", width = 6.5, height = 4)
ggarrange(Hist_Fit(data = BB_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = BB_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggsave ("imagens/hist_retorno_max_bbse3.png", width = 6.5, height = 4)
ggarrange(Hist_Fit(data = PORTO_ts, values = "Retorno", fits = "self", bins = 17),
Serie(data = PORTO_ts, col_x = "Date", col_y = "Retorno", 2),
nrow = 1, ncol = 2)
ggsave ("imagens/hist_retorno_max_porto.png", width = 6.5, height = 4)
PORTO_n
PORTO_q <- c((1:PORTO_n)/(PORTO_n+1))
PORTO_ginv <- -log(-log(PORTO_q))
qqplot(PORTO_ts$Retorno, PORTO_ginv, xlab="Quantil empírico",ylab="Quantil da Gumbel",main="")
BB_q <- c((1:BB_n)/(BB_n+1))
BB_ginv <- -log(-log(BB_q))
BB_q
BB_ginv
## Qq plot
BB_q <- c((1:BB_n)/(BB_n+1))
BB_ginv <- -log(-log(BB_q))
qqplot(BB_ts$Retorno, BB_ginv, xlab="Quantil empírico",ylab="Quantil da Fréchet",main="")
## Qq plot
BB_q <- c((1:BB_n)/(BB_n+1))
BB_ginv <- -log(-log(BB_q))
qqplot(BB_ts$Retorno, BB_ginv, xlab="Quantil empírico",ylab="Quantil da Fréchet",main="")
ggsave ("imagens/quantis_empiricos_bbse3.png", width = 6, height = 4)
grid()
PORTO_q <- c((1:PORTO_n)/(PORTO_n+1))
PORTO_ginv <- -log(-log(PORTO_q))
qqplot(PORTO_ts$Retorno, PORTO_ginv, xlab="Quantil empírico",ylab="Quantil da Gumbel",main="")
ggsave ("imagens/quantis_empiricos_porto.png", width = 6, height = 4)
grid()
qqplot(PORTO_ts$Retorno, PORTO_ginv, xlab="Quantil empírico",ylab="Quantil da Gumbel",main="")
PORTO_q <- c((1:PORTO_n)/(PORTO_n+1))
PORTO_ginv <- -log(-log(PORTO_q))
qqplot(PORTO_ts$Retorno, PORTO_ginv, xlab="Quantil empírico",ylab="Quantil da Gumbel",main="")
ggsave ("imagens/quantis_empiricos_porto.png", width = 6, height = 4)
grid()
BB_q <- c((1:BB_n)/(BB_n+1))
BB_ginv <- -log(-log(BB_q))
qqplot(BB_ts$Retorno, BB_ginv, xlab="Quantil empírico",ylab="Quantil da Fréchet",main="")
ggsave ("imagens/quantis_empiricos_bbse3.png", width = 6, height = 4)
grid()
PORTO_q <- c((1:PORTO_n)/(PORTO_n+1))
PORTO_ginv <- -log(-log(PORTO_q))
qqplot(PORTO_ts$Retorno, PORTO_ginv, xlab="Quantil empírico",ylab="Quantil da Gumbel",main="")
ggsave ("imagens/quantis_empiricos_porto.png", width = 6, height = 4)
BB_gevfit1 <- gevFit(BB_ts$Retorno, type ="mle")
BB_gevfit2 <- gevFit(BB_ts$Retorno, type ="pwm")
PORTO_gevfit1 <- gevFit(PORTO_ts$Retorno, type ="mle")
PORTO_gevfit2 <- gevFit(PORTO_ts$Retorno, type ="pwm")
BB_gevmle <- BB_gevfit1@fit[['par.ests']]
BB_gevpwm <- BB_gevfit2@fit[['par.ests']]
PORTO_gevmle <- PORTO_gevfit1@fit[['par.ests']]
PORTO_gevpwm <- PORTO_gevfit2@fit[['par.ests']]
PORTO_gevmle
PORTO_gevpwm
BB_gevmle
BB_gevpwm
Hist_Fit(data = BB_ts, values = 'Retorno', bins = 10,
fits = c("gevmle", "gevpwm"), fits_param = list("gevmle" = BB_gevmle,
"gevpwm" = BB_gevpwm))
Hist_Fit(data = PORTO_ts, values = 'Retorno', bins = 10,
fits = c("gevmle", "gevpwm"), fits_param = list("gevmle" = PORTO_gevmle,
"gevpwm" = PORTO_gevpwm))
summary(BB_gevfit1)
summary(BB_gevfit2)
summary(PORTO_gevfit1)
summary(PORTO_gevfit2)
PORTO_gevmle
PORTO_gevpwm
BB_gevmle
BB_gevpwm
PORTO_gevfit1
PORTO_gevfit2
BB_gevfit1
BB_gevfit2
par(mfrow=c(1,1))
BB_fit <- fevd(BB_ts$Retorno, type="GEV")
pars <- data.frame("Locacao" = BB_fit$results$par['location'],
"Escala" = BB_fit$results$par['scale'],
"Forma" = BB_fit$results$par['shape'])
row.names(pars) <- ""
kbl(pars, booktabs = T,
caption = "Parâmetros estimados para o ajuste de uma distribuição GEV para dados BB15.") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
PORTO_fit <- fevd(PORTO_ts$Retorno, type="GEV")
pars <- data.frame("Locacao" = PORTO_fit$results$par['location'],
"Escala" = PORTO_fit$results$par['scale'],
"Forma" = PORTO_fit$results$par['shape'])
row.names(pars) <- ""
kbl(pars, booktabs = T,
caption = "Parâmetros estimados para o ajuste de uma distribuição GEV para dados PORTO57.") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
BB_fit$call <- ""
plot(BB_fit)
PORTO_fit$call <- ""
plot(PORTO_fit)
BB_fit$call <- ""
plot(BB_fit)
PORTO_fit$call <- ""
plot(PORTO_fit)
ci(BB_fit,type="parameter")
years <- c(2,5,10,20)
BB_Full_ret <- Retorno(BB_fit, years)
BB_Full_ret[-1] %>%
map_df(round, 4) %>%
mutate(Tempo = paste(years, "Anos", sep = " "), .before = names(BB_Full_ret)[2]) %>%
kbl(booktabs = T, caption="\\label{tab:retBB}Intervalos de confiança para os retornos esperados da BB15.") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
BB_Full_ret <- Retorno(BB_fit, years)
BB_Full_ret
PORTO_Full_ret <- Retorno(PORTO_fit, years)
PORTO_Full_ret[-1] %>%
map_df(round, 4) %>%
mutate(Tempo = paste(years, "Anos", sep = " "), .before = names(PORTO_Full_ret)[2]) %>%
kbl(booktabs = T, caption="\\label{tab:retPORTO}Intervalos de confiança para os retornos esperados da PORTO57.") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
PORTO_Full_ret
BB_Full_ret
BB_Full_ret[-1] %>%
map_df(~round(exp(.x)*1000), 0) %>%
mutate(Tempo = paste(years, "Anos", sep = " "), .before = names(BB_Full_ret)[2]) %>%
rename_all( ~ names(BB_Full_ret)) %>%
kbl(booktabs = T, caption = "\\label{tab:retBBdol}Retorno máximo para um investimento de \\$1000 em ações da BB15.") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
BB_Full_ret
Retorno(PORTO_fit, years)
years <- c(2,5,10,20)
BB_Full_ret <- Retorno(BB_fit, years)
pars
row.names(pars) <- ""
kbl(pars, booktabs = T,
caption = "Parâmetros estimados para o ajuste de uma distribuição GEV para dados PORTO57.") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
ci(BB_fit,type="parameter")
ci(BB_fit,type="parameter")
ci(PORTO_fit,type="parameter")
PORTO_gevmle
BB_gevmle
PORTO_gevmle
BB_fit$call <- ""
plot(BB_fit)
plot(BB_fit)
BB_fit$call <- ""
plot(BB_fit)
PORTO_fit$call <- ""
plot(PORTO_fit)
PORTO_fit$call <- ""
plot(PORTO_fit)
PORTO_fit$call <- ""
plot(PORTO_fit)
PORTO_fit$call <- ""
plot(PORTO_fit)
BB_fit$call <- ""
plot(BB_fit)
PORTO_fit$call <- ""
plot(PORTO_fit)
ci(PORTO_fit,type="parameter")
ci(BB_fit,type="parameter")
ci(PORTO_fit,type="parameter")
ci(BB_fit,type="parameter")
BB_Full_ret <- Retorno(BB_fit, years)
BB_Full_ret
PORTO_Full_ret <- Retorno(PORTO_fit, years)
PORTO_Full_ret
return.level(BB_fit, years, do.ci = TRUE)
return.level(PORTO_fit, years, do.ci = TRUE)
return.level(BB_fit, years, do.ci = TRUE)
return.level(PORTO_fit, years, do.ci = TRUE)
BB_Full_ret[-1] %>%
map_df(~round(exp(.x)*1000), 0)
PORTO_Full_ret[-1] %>%
map_df(~round(exp(.x)*1000), 0)
PORTO_Full_ret
BB_Full_ret
BB_Full_ret[-1]
BB_Full_ret
10+10
20+25+30+32
